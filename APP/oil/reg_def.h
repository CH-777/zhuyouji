/*********************************************************************************************************
//                             NCLUDE FILES
*********************************************************************************************************/
#ifndef __REG_DEF_H
#define __REG_DEF_H

#include <stdlib.h>
#include <stdio.h>
#include <stm32f10x_conf.h>


/******************************************************************************/
//                            REG  DEFINES
/******************************************************************************/

extern uint16_t   ucSDiscInBuf[]  ;
extern uint16_t   ucSCoilBuf[]    ;
extern uint16_t   usSRegInBuf[]   ;
extern uint16_t   usSRegHoldBuf[] ;
//保持寄存器数组的第 零个 寄存器放  注油枪按钮状态，即触发注油，当写入1时，触发注油
//保持寄存器数组的第 一个 寄存器放  PID温控仪是否成功设定温度,1为成功，
//保持寄存器数组的第 二个 寄存器放  PID温控仪是否达到设定温度,0为未到达，
//保持寄存器数组的第 三个 寄存器放  运行状态标志位
//保持寄存器数组的第 四个 寄存器放  注油状态标志位
//保持寄存器数组的第 五个 寄存器放  报警错误码

/*与配方相关的寄存器，当写入配方编号时，回调函数改写相关配方参数到对应的寄存器中*/

//保持寄存器数组的第 六个 寄存器放               当前配方编号   //触发改写数据区回调函数
//保持寄存器数组的第 七个 寄存器放               是否使用当前配方编号  //触发选择配方回调函数

//保持寄存器数组的第 八个              寄存器放  油品
//保持寄存器数组的第 九 ~ 十个         寄存器放  设定压力(MPa)(float)
//保持寄存器数组的第 十一 ~ 十二个     寄存器放  设定温度(°C)(float)    
//保持寄存器数组的第 十三 ~ 十四个     寄存器放  油液密度(g/ml)(float)
//保持寄存器数组的第 十五 ~ 十六个     寄存器放  设定注油量(ml)(float)
//保持寄存器数组的第 十七 ~ 十八个     寄存器放  设定补偿量(ml)(float)

//注油参数相关
//保持寄存器数组的第 十九 ~ 二十个     寄存器放  单位脉冲注油量(g/pulse)(float)
//保持寄存器数组的第 二十一个          寄存器放  计算脉冲数(pulse)
//保持寄存器数组的第 二十二个          寄存器放  实际脉冲数(pulse)
//保持寄存器数组的第 二十三个          寄存器放  注油次数(次)
//保持寄存器数组的第 二十四 ~ 二十五个 寄存器放  计算注油量(g)(float)
//保持寄存器数组的第 二十六 ~ 二十七个 寄存器放  实际注油量(g)(float)
//保持寄存器数组的第 二十八 ~ 二十九个 寄存器放  计算注油量(ml)(float)
//保持寄存器数组的第 三十   ~ 三十一个 寄存器放  实际注油量(ml)(float)
//保持寄存器数组的第 三十二 ~ 三十三个 寄存器放  注油计时(s)
//保持寄存器数组的第 三十四 ~ 三十五个 寄存器放  平均流量(ml/s)(float)
//保持寄存器数组的第 三十六 ~ 三十七个 寄存器放  实际流量(ml/s)(float)

typedef enum{
	OIL_ADD_START               = 0,
	PID_TEMPTRUE_SET_SUCCESS    = 1,
	PID_TEMPT_REACHED           = 2,
	RUN_MODE                    = 3,
	OIL_ADD_PROCESS             = 4,
	ALERM_ERROR_CODE            = 5,
	FORMULA_INDEX               = 6,
	SELECT_FORMULA              = 7,
	OIL_QUALITY                 = 8,
	PRESSURE                    = 9,
	TEMPTRUE                    = 11,
	DENSITY                     = 13,
	OIL_AMOUNT                  = 15,
	COMPENSATION_AMOUNT         = 17,
	OIL_UNIT_PULSE              = 19,
	COMPUTE_PULSE               = 21,
	ACTUAL_PULSE                = 22,
	OIL_ADD_CNT                 = 23,
	COMPUTE_OIL_G               = 24,
	ACTUAL_OIL_G                = 26,
	COMPUTE_OIL_ML              = 28,
	ACTUAL_OIL_ML               = 30,
	OIL_ADD_TIME                = 32,
	AVERAGE_FLOW_RATE           = 34,
	REAL_TIME_FLOW_RATE         = 36
}SRegHoldIndex;

/**************************************************/
/*               输入寄存器定义
 *          (一个AI通道占用两个寄存器地址),
 *              模拟量         寄存器地址 
 *           压力(Mpa，float)     0-1
 *           液位(%，float)       2-3
 *           温度(°, float)      4-5
 */
typedef enum{
	PRESSURE_INREG_INDEX    = 0,
	LIQQUID_INREG_INDEX     = 2,
	TEMPERATRUE_INREG_INDEX = 4
}SRegInBufIndex;
/**************************************************/
/*          ucSCoilBuf线圈定义
 *    输出IO            路
 *     绿灯             0
 *     红灯             1
 *     黄灯             2
 *    蜂鸣器            3
 *  注油完成灯          4
 *   气控球阀1          5
 *   气控球阀2          6
 *   气控球阀3          7
 * 
 *    气控球阀4         8
 *    气控球阀5         9
 *    注油枪电磁阀      10
 *    电磁通断阀1       11
 *    电磁通断阀2       12
 *    电磁通断阀3       13
 * 温控仪-启动加热      14
 *  温控仪-预留         15
 * 
 *      电机            16   
 */
/**************************************************/
/*            ucSDiscInBuf定义
 *     输入IO         对应路
 *    启动按钮          0
 *    停止按钮          1
 *    复位按钮          2
 *    急停按钮          3
 *   模式选择按钮       4
 *   注油启动按钮       5
 *    压差发讯器        6
 *    热过载继电器      7
 * 
 *    PID温度到达       8
 *    PID温度超限       9
 *    流量计计数错误    10
 */

#endif
